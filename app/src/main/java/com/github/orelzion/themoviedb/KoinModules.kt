package com.github.orelzion.themoviedb

import android.content.Context
import androidx.room.Room
import androidx.room.RoomDatabase
import com.github.orelzion.themoviedb.db.MovieDB
import com.github.orelzion.themoviedb.db.TypeConverters
import com.github.orelzion.themoviedb.repository.MoviesRepository
import com.github.orelzion.themoviedb.repository.MoviesRepositoryImpl
import com.github.orelzion.themoviedb.service.MovieDBService
import com.github.orelzion.themoviedb.view_model.MovieViewModel
import com.squareup.moshi.Moshi
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import org.koin.android.ext.koin.androidApplication
import org.koin.android.viewmodel.dsl.viewModel
import org.koin.dsl.module
import retrofit2.Retrofit
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
import retrofit2.converter.moshi.MoshiConverterFactory


val appModule = module {

    // single instance of movies repository
    single<MoviesRepository> { MoviesRepositoryImpl(get(), get()) }

    // Movies view model, generated by Koin using Android's ViewModelFactory
    viewModel { MovieViewModel(get()) }

    // Create a single instance of movie web service
    single<MovieDBService> {
        // First create a retrofit client
        val retrofit = createRetrofitClient()
        // Then, let retrofit create the service
        retrofit.create(MovieDBService::class.java)
    }

    // Create a single instance of the local movie DB
    single { createRoomDb(androidApplication()).build().movieDAO() }
}

fun createMoshiConverter(): Moshi {
    return Moshi.Builder()
        .add(TypeConverters())
        .build()
}

fun createRoomDb(context: Context): RoomDatabase.Builder<MovieDB> {
    return Room.databaseBuilder(context, MovieDB::class.java, "movie-db")
}

fun createRetrofitClient(): Retrofit {
    return Retrofit.Builder()
        .client(createOKHttpClient())
        .baseUrl(DatasourceProperties.API_BASE_URL)
        .addConverterFactory(MoshiConverterFactory.create(createMoshiConverter()))
        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
        .build()
}

fun createOKHttpClient(): OkHttpClient {
    return OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().apply { level = HttpLoggingInterceptor.Level.BODY })
        .addInterceptor {
            // Add api key to all requests by default
            var request = it.request()
            val url = request.url().newBuilder().addQueryParameter("api_key", DatasourceProperties.API_KEY).build()
            request = request.newBuilder().url(url).build()
            it.proceed(request)
        }
        .build()
}

object DatasourceProperties {
    const val API_BASE_URL = "http://api.themoviedb.org/3/"
    const val API_KEY = "c5f7d0a54080259ca21304c2846628f3"
    const val IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"
}